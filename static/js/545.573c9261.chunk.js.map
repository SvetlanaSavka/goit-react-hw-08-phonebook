{"version":3,"file":"static/js/545.573c9261.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/contact-selectors.js","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-operations.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","page/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field /* ErrorMessage */ } from 'formik';\n\nexport const Formcontact = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 12px;\n  width: 470px;\n  border-radius: 2px;\n  margin-bottom: 6px;\n`;\n\nexport const Formcontactlabel = styled.label`\n  display: inline-block;\n  margin-left: 20px;\n  font-size: 20px;\n  font-family: sans-serif;\n  cursor: pointer;\n  color: black;\n`;\n\nexport const ButtononClick = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 20px;\n  margin-top: 20px;\n  padding: 4px 18px;\n  width: 120px;\n  border-radius: 4px;\n  background-color: lightblue;\n  :hover {\n    background-color: lightgrey;\n  }\n`;\n\nexport const ContactFormField = styled(Field)`\n  margin-left: 20px;\n  display: inline-block;\n  border-width: 2px;\n  border-radius: 4px;\n  height: 26px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getContacts = state => state.contacts.contacts;\nconst getFilter = state => state.contacts.filter;\nconst getIsLoading = state => state.contacts.isLoading;\n\nconst getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\nconst contactSelectors = {\n  getContacts,\n  getFilter,\n  getIsLoading,\n  getVisibleContacts,\n};\nexport default contactSelectors;\n","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Formcontact,\n  ButtononClick,\n  ContactFormField,\n  Formcontactlabel,\n} from './ContactForm.styled';\n//import { getContacts, addContactAsync } from 'redux/auth/authSlice';\nimport contactSelectors from 'redux/contacts/contact-selectors';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .required()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n    }),\n\n  number: yup\n    .string()\n    .required()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      {\n        message:\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n      }\n    ),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(contactSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const validationData = data =>\n    contacts.find(contact => contact.name === data.name);\n\n  const addContacts = data => {\n    const isAdded = validationData(data);\n    if (isAdded) {\n      alert(`${data.name} уже добавлен`);\n      return;\n    }\n\n    const contact = {\n      id: nanoid(),\n      name: data.name,\n      number: data.number,\n    };\n    dispatch(addContact(contact));\n  };\n  const handleSubmit = (values, { resetForm }) => {\n    addContacts(values);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ number: '', name: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Formcontact autoComplete=\"off\">\n        <Formcontactlabel htmlFor=\"user-name\">Name</Formcontactlabel>\n        <ContactFormField type=\"text\" name=\"name\" id=\"user-name\" />\n        <ErrorMessage name=\"name\" />\n\n        <Formcontactlabel htmlFor=\"number\">Number</Formcontactlabel>\n        <ContactFormField type=\"tel\" name=\"number\" />\n        <ErrorMessage name=\"number\" />\n\n        <ButtononClick type=\"submit\">Add contact</ButtononClick>\n      </Formcontact>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import axios from 'axios';\nimport {\n  addContactError,\n  addContactRequest,\n  addContactSuccess,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contactsAction';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\nexport const addContact = contact => async dispatch => {\n  dispatch(addContactRequest());\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error.message));\n  }\n};\n\nexport const deleteContact = id => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    const { data } = await axios.delete(`/contacts/${id}`);\n    dispatch(deleteContactSuccess(data));\n  } catch (error) {\n    dispatch(deleteContactError(error.message));\n  }\n};\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  padding: 4px 18px;\n  width: 70px;\n  border-radius: 4px;\n  background-color: lightblue;\n  :hover {\n    background-color: lightgrey;\n  }\n`;\n\nexport const Link = styled.li`\n  font-size: 16px;\n  margin-left: 30px;\n  font-family: 'Helvetica';\n  padding-right: 200px;\n`;\nexport const Span = styled.span`\n  margin-right: 30px;\n`;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Link, Span } from './ContactList.styled';\nimport contactSelectors from 'redux/contacts/contact-selectors';\nimport {\n  fetchContacts,\n  deleteContact,\n} from 'redux/contacts/contacts-operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(contactSelectors.getContacts);\n  const filter = useSelector(contactSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  const deleteContactId = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ul>\n      {getVisibleContacts().map(({ id, name, number }) => (\n        <Link key={id}>\n          <Span>{name + ': ' + number}</Span>\n          <Button type=\"button\" onClick={() => deleteContactId(id)}>\n            Delete\n          </Button>\n        </Link>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\n//import { useDispatch } from 'react-redux';\n//import { useEffect } from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\n//import { fetchContacts } from 'redux/contacts/contacts-operations';\n\nconst Contacts = () => {\n  //const dispatch = useDispatch();\n\n  /* useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]); */\n\n  return (\n    <>\n      <ContactForm />\n      <ContactList />\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["Formcontact","styled","Form","Formcontactlabel","ButtononClick","ContactFormField","Field","getContacts","state","contacts","getFilter","filter","getIsLoading","isLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","schema","yup","shape","required","matches","message","number","useSelector","contactSelectors","dispatch","useDispatch","addContacts","data","isAdded","find","contact","validationData","alert","id","nanoid","addContactRequest","axios","addContactSuccess","addContactError","addContact","initialValues","validationSchema","onSubmit","values","resetForm","autoComplete","htmlFor","type","Button","Link","Span","useEffect","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","deleteContactId","deleteContactRequest","deleteContactSuccess","deleteContactError","deleteContact","map","onClick"],"sourceRoot":""}
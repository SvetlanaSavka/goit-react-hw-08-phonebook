{"version":3,"file":"static/js/369.9c5f22a1.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/contact-selectors.js","api/fetchContact.js","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-operations.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","page/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field /* ErrorMessage */ } from 'formik';\n\nexport const Formcontact = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 12px;\n  width: 470px;\n  border-radius: 2px;\n  margin-bottom: 6px;\n`;\n\nexport const Formcontactlabel = styled.label`\n  display: inline-block;\n  margin-left: 20px;\n  font-size: 14px;\n  font-family: sans-serif;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primaryShade2};\n`;\n\nexport const ButtononClick = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: 20px;\n  margin-top: 20px;\n  padding: 4px 18px;\n  width: 120px;\n  border-radius: 4px;\n  background-color: lightblue;\n  :hover {\n    background-color: lightgrey;\n  }\n`;\n\nexport const ContactFormField = styled(Field)`\n  margin-left: 20px;\n  display: inline-block;\n  border-width: 2px;\n  border-radius: 4px;\n  height: 26px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getContacts = state => state.contacts.contacts;\nconst getFilter = state => state.contacts.filter;\nconst getIsLoading = state => state.contacts.isLoading;\n\nconst getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\nconst contactSelectors = {\n  getContacts,\n  getFilter,\n  getIsLoading,\n  getVisibleContacts,\n};\nexport default contactSelectors;\n","import contactApi from './api';\n\nexport const getContacts = () => contactApi.get('/contacts');\n\nexport const postContact = contact => contactApi.post('/contacts', contact);\n\nexport const removeContact = id => contactApi.delete(`/contacts/${id}`);\n","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Formcontact,\n  ButtononClick,\n  ContactFormField,\n  Formcontactlabel,\n} from './ContactForm.styled';\nimport contactSelectors from 'redux/contacts/contact-selectors';\nimport { addContact } from 'redux/contacts/contacts-operations';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .required()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n    }),\n\n  number: yup\n    .string()\n    .required()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      {\n        message:\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n      }\n    ),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(contactSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const validationData = data =>\n    contacts.find(contact => contact.name === data.name);\n\n  const addContacts = data => {\n    const isAdded = validationData(data);\n    if (isAdded) {\n      alert(`${data.name} уже добавлен`);\n      return;\n    }\n\n    const contact = {\n      id: nanoid(),\n      name: data.name,\n      number: data.number,\n    };\n    dispatch(addContact(contact));\n  };\n  const handleSubmit = (values, { resetForm }) => {\n    addContacts(values);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ number: '', name: '' }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Formcontact autoComplete=\"off\">\n        <Formcontactlabel htmlFor=\"user-name\">Name</Formcontactlabel>\n        <ContactFormField type=\"text\" name=\"name\" id=\"user-name\" />\n        <ErrorMessage name=\"name\" />\n\n        <Formcontactlabel htmlFor=\"number\">Number</Formcontactlabel>\n        <ContactFormField type=\"tel\" name=\"number\" />\n        <ErrorMessage name=\"number\" />\n\n        <ButtononClick type=\"submit\">Add contact</ButtononClick>\n      </Formcontact>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import { getContacts, postContact, removeContact } from 'api/fetchContact';\nimport {\n  addContactError,\n  addContactRequest,\n  addContactSuccess,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contactsAction';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await getContacts();\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\nexport const addContact = contact => async dispatch => {\n  dispatch(addContactRequest());\n  try {\n    const { data } = await postContact(contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error.message));\n  }\n};\n\nexport const deleteContact = id => async dispatch => {\n  dispatch(deleteContactRequest());\n  removeContact(id)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error.message)));\n};\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  padding: 4px 18px;\n  width: 70px;\n  border-radius: 4px;\n  background-color: lightblue;\n  :hover {\n    background-color: lightgrey;\n  }\n`;\n\nexport const Link = styled.li`\n  margin-bottom: 15px;\n  max-width: 400px;\n  display: flex;\n  justify-content: space-between;\n  font-size: 16px;\n  margin-left: 30px;\n  font-family: 'Helvetica';\n  padding-right: 200px;\n  list-style: none;\n`;\nexport const Span = styled.span`\n  margin-right: 30px;\n`;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button, Link, Span } from './ContactList.styled';\nimport contactSelectors from 'redux/contacts/contact-selectors';\nimport {\n  fetchContacts,\n  deleteContact,\n} from 'redux/contacts/contacts-operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(contactSelectors.getContacts);\n  const filter = useSelector(contactSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  const deleteContactId = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ul>\n      {getVisibleContacts().map(({ id, name, number }) => (\n        <Link key={id}>\n          <Span>{name + ': ' + number}</Span>\n          <Button type=\"button\" onClick={() => deleteContactId(id)}>\n            Delete\n          </Button>\n        </Link>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\n//import { useDispatch } from 'react-redux';\n//import { useEffect } from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\n//import { fetchContacts } from 'redux/contacts/contacts-operations';\n\nconst Contacts = () => {\n  //const dispatch = useDispatch();\n\n  /* useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]); */\n\n  return (\n    <>\n      <ContactForm />\n      <ContactList />\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["Formcontact","styled","Form","Formcontactlabel","theme","colors","primaryShade2","ButtononClick","ContactFormField","Field","getContacts","state","contacts","getFilter","filter","getIsLoading","isLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","postContact","contact","contactApi","removeContact","id","schema","yup","shape","required","matches","message","number","useSelector","contactSelectors","dispatch","useDispatch","addContacts","data","isAdded","find","validationData","alert","nanoid","addContactRequest","addContactSuccess","addContactError","addContact","initialValues","validationSchema","onSubmit","values","resetForm","autoComplete","htmlFor","type","Button","Link","Span","useEffect","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","deleteContactId","deleteContactRequest","then","deleteContactSuccess","catch","error","deleteContactError","deleteContact","map","onClick"],"sourceRoot":""}